workspace {

    model {
        user = person "User"
        superFinanciera = person "Super Intendencia Financiera"
        empresa = person "Empresa Juridica"
        banquitoSystem = softwareSystem "Aplicación Banquito" {
            webApp = container "Aplicacion Web" "Aplicación Web que permite la interacción de las acciones de los usuarios con el sistema" "Angular" {
                user -> this "Uses"
                empresa -> this "empresa"
            }
            mobileApp = container "Aplicacion Mobile" "Aplicación Mobile para el acceso a los servicios del sistema" "IoS / Android" {
                user -> this "Uses"
                empresa -> this "empresa"
            }
            transferencias = container "Transferencias" "Componente encargado de todas las transferencias de dinero entre cuentas, ya sea con alidos o externos" "Tecnologia" {
                realizarTransferencia = component "Realizar Transferencia" "Gestiona el proceso de iniciar y coordinar una transferencia de dinero entre cuentas, incluyendo la validación inicial y la selección del tipo de transferencia (aliado o externo)." "Java + Spring Boot" {
                    mobileApp -> this "Uses"
                    webApp -> this "Uses"
                }
                validarCuenta = component "Validar Cuenta" "Se encarga de verificar que las cuentas involucradas en la transferencia estén activas y cumplan con las políticas de seguridad antes de proceder con la transferencia." "Java + Spring Boot" {
                    realizarTransferencia -> this 
                }
                tranferenciaBancoAliado = component "Transferencia Banco Aliado" "Maneja la comunicación y la ejecución de transferencias hacia cuentas en bancos aliados, asegurando la correcta aplicación de débitos y acreditaciones." "Java + Spring Boot" {
                    realizarTransferencia -> this
                }
                transferenciaBancoExterno = component "Transferencia Banco Externo" "Gestiona las transferencias hacia cuentas en bancos externos, incluyendo la coordinación con sistemas ACH o similares para completar la transacción." "Java + Spring Boot" {
                    realizarTransferencia -> this
                }
                realizarDebitoBancoAliado = component "Realizar Débito Banco Aliado" "Inicia el proceso de débito en las cuentas del banco aliado, preparando los fondos para la transferencia." "Java + Spring Boot"
                confirmarDebitoBancoAliado = component "Confirmar Débito Banco Aliado" "Verifica y confirma que el débito se ha realizado correctamente en el banco aliado antes de proceder con la acreditación." "Java + Spring Boot"
                realizarAcreditacionBancoAliado = component "Realizar Acreditación Banco Aliado" "Gestiona la acreditación de fondos en la cuenta de destino dentro de un banco aliado, finalizando la transferencia." "Java + Spring Boot" 
                confirmarAcreditacionBancoAliado  = component "Confirmar Acreditación Banco Aliado" "Confirma que la acreditación de fondos se ha realizado exitosamente en el banco aliado, cerrando el ciclo de la transferencia." "Java + Spring Boot"
                brokerBancoAliado = component "Broker Comunicación Banco Aliado" "Centraliza y orquesta la comunicación entre el sistema de transferencias y los bancos aliados, asegurando la secuencia correcta de débitos y acreditaciones." "Java + Spring Boot + Apache Kafka" {
                    realizarDebitoBancoAliado -> this
                    confirmarDebitoBancoAliado -> this
                    realizarAcreditacionBancoAliado -> this
                    confirmarAcreditacionBancoAliado -> this
                    tranferenciaBancoAliado -> this
                    transferenciaBancoExterno -> this
                }
            }
            pagos = container "Pagos Terceros" {
                controladorPagoTercero = component "Realizar pago tercero" {
                    mobileApp -> this "Uses"
                    webApp -> this "Uses"
                }
                procesarPago = component "Broker procesar pago"{
                    controladorPagoTercero -> this
                }
                 validarPago = component "Validar pago"{
                     procesarPago -> this

                }
                almacenarPago = component "Almacenar pago"{
                    procesarPago -> this
                    validarPago -> this
                }
                pagoExterno = component "Integrador Pasarelas de pagos externa"{
                    procesarPago -> this
                    
                # Este servicio tambien se relaciona con transferencias
                }
                serviciosTerceros = component "Integrador servicios externos"{
                    procesarPago -> this
                }
                
            }
            
            reportes = container "Reportes" "Permite la construcción y disponibilización automática de los reportes" "Apache Airflow" {
                reporteTrimestralPersonas = component "Reporte Trimestral Personas Naturales"{
                    procesarPago -> this
                    brokerBancoAliado -> this 
                }
                reporteTrimestralEmpresas = component "Reporte Trimestral Personas Jurídicas"{
                    procesarPago -> this
                    brokerBancoAliado -> this 
                }
                reporteSemestralSuper = component "Reporte Semestral Superintendencia Financiera"{
                    procesarPago -> this
                    brokerBancoAliado -> this 
                }
                
            }
            
            gestionDeUsuarios = container "Gestion de Usuarios" {
                controladorUsuarios = component "Controlador Nuevo Usuario" {
                    mobileApp -> this "Uses"
                    webApp -> this "Uses"
                }
                validarExistenciaPrevia = component "Validar Existencia Previa" {
                   controladorUsuarios -> this 
                }
                crearUsuarioNatural = component "Crear Usuario Natural" {
                   controladorUsuarios -> this 
                }
                crearUsuarioJuridico = component "Crear Usuario Juridico" {
                   controladorUsuarios -> this 
                }
                cargaDeEmpleados = component "Cargar Empleados Nomina" {
                   crearUsuarioJuridico -> this
                }
                crearBilletera = component "Crear Billetera Usuario" {
                    controladorUsuarios -> this
                }
                asociarBancosAliados = component "Asociar Bancos Aliados" {
                    controladorUsuarios -> this
                }               
                controladorDeRoles = component "Controlador de Roles" {
                    webApp -> this "Uses"
                    controladorUsuarios -> this
                }
                gestionDeRoles = component "Asignacion de Roles" {
                   controladorDeRoles -> this
                }
            }
            
            pagosNomina = container "Pagos de Nómina" {
                controladorPagoNomina = component "Servicio de Pago de Nómina" {
                    mobileApp -> this "Uses"
                    webApp -> this "Uses"
                }
                
                validarEmpleadosEmpresa = component "Validar Empleados de Empresa" 
                
                procesarPagoNomina = component "Procesar Pago de Nómina" {
                    controladorPagoNomina -> this
                }
                
                registrarPagoNomina = component "Registrar Pago de Nómina" {
                    procesarPagoNomina -> this
                }
                
                programarPagoNomina = component "Programar Pago de Nómina" {
                    procesarPagoNomina -> this
                }
            
                cargaMasivaNomina = component "Carga Masiva de Empleados" {
                    procesarPagoNomina -> this 
                    this -> validarEmpleadosEmpresa
                }
            
                brokerPagosNomina = component "Broker Pagos de Nómina" {
                    procesarPagoNomina -> this
                    
                }
            
                
            
                pagoNomina = component "Pago de Nómina Masiva" {
                    brokerPagosNomina -> this
                    programarPagoNomina -> this
                }
                
                
            }
            
            autorizaciones = container "Autorizaciones" {
                webApp -> this
                mobileApp -> this
                transferencias -> this
                pagos -> this
                reportes -> this
                gestionDeUsuarios -> this
                pagosNomina -> this
            }
            
            notificaciones = container "Integrador servicio Notificaciones"{
                controladorNotificaciones = component "Controlador de Notificaciones"
                servicioNotificaciones  = component "Servicio de Envio de Notificaciones"
                brokerNotificaciones  = component "Borker de Notificaciones" {
                    servicioNotificaciones -> this
                    controladorNotificaciones -> this
                }
                pagos -> this
                transferencias -> this
                gestionDeUsuarios -> this
            }
            
            auditoria = container "Auditoria"{
                pagos -> this
                transferencias -> this
                pagosNomina -> this 
                notificaciones -> this
                gestionDeUsuarios -> this
            }
            
            pagoNomina -> realizarTransferencia

        }
        bancoAliadoSystem = softwareSystem "Banco Aliado Sistema"
        achAliadosystem = softwareSystem "Sistema de ACH"
        mensajeria = softwareSystem "mensajería"{
            reporteTrimestralPersonas -> this
            reporteTrimestralEmpresas -> this
            reporteSemestralSuper -> this
        }
        
        banquitoSystem -> bancoAliadoSystem
        banquitoSystem -> superFinanciera
        bancoAliadoSystem -> brokerBancoAliado
        transferenciaBancoExterno  -> achAliadosystem
    }

    views {
        systemContext banquitoSystem {
            include *
            autolayout lr
        }
        

        container banquitoSystem {
            include *
            autolayout lr
        }
        
        component transferencias {
            include *
            autolayout lr
        }
        component pagos {
            include *
            autolayout lr
        }
        
        component reportes {
            include *
            autolayout lr
        }
        
        component pagosNomina {
            include *
            autolayout lr
        }
        
        component notificaciones {
            include *
            autolayout lr
        }
        
        component gestionDeUsuarios {
            include *
            autolayout lr
        }

        theme default
    }

}